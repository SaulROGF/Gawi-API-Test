import { AdministratorService } from './administrator.service';
import { ServerMessage } from '../../../../classes/ServerMessage.class';
export declare class AdministratorController {
    private readonly administratorService;
    constructor(administratorService: AdministratorService);
    getHomeAdminData(req: any): Promise<ServerMessage>;
    getAllAccountUsersData(req: any): Promise<ServerMessage>;
    getOrganizationClientsAdminData(req: any): Promise<ServerMessage>;
    getClientProfileData(req: any, idUser: number): Promise<ServerMessage>;
    getOrganizationTechnicianAdminData(req: any): Promise<ServerMessage>;
    getOrganizationCountersAdminData(req: any): Promise<ServerMessage>;
    getOrganizationWarehousesAdminData(req: any): Promise<ServerMessage>;
    createUser(req: any, body: any): Promise<ServerMessage>;
    updateUser(req: any, body: any): Promise<ServerMessage>;
    deleteUser(req: any, idUser: number): Promise<ServerMessage>;
    getAllDevicesList(req: any): Promise<ServerMessage>;
    getAllOrganizationDevicesList(idOrganization: number): Promise<ServerMessage>;
    getAllHistoryNaturalGasDeviceData(body: any): Promise<ServerMessage>;
    getAllHistoryWaterDeviceData(body: any): Promise<ServerMessage>;
    getAllHistoryGasDeviceData(body: any): Promise<ServerMessage>;
    getAllHistoryLoggerDeviceData(body: any): Promise<ServerMessage>;
    updateApnDeviceData(body: any): Promise<ServerMessage>;
    unlockDeviceToBeAssigned(body: any): Promise<ServerMessage>;
    getGasDeviceAlertsEndpoint(idDevice: number, period: number, req: any): Promise<ServerMessage>;
    getWaterDeviceAlertsEndpoint(idDevice: number, period: number, req: any): Promise<ServerMessage>;
    getOrganizationDataEndpoint(req: any): Promise<ServerMessage>;
    getOrganizationsData(req: any): Promise<ServerMessage>;
    deviceAssignments(body: any): Promise<ServerMessage>;
    getOrganizationAdminEndpoint(idOrganization: number): Promise<ServerMessage>;
    getOrganizationAdminChoicesEndpoint(choice: string): Promise<ServerMessage>;
    createOrganizationEndpoint(logos: any, body: any): Promise<ServerMessage>;
    updateOrganizationDataEndpoint(logos: any, body: any): Promise<ServerMessage>;
    deleteOrganizationEndpoint(idOrganization: number): Promise<ServerMessage>;
}
