import { Town } from './../../../../models/town.entity';
import { User } from '../../../../models/user.entity';
import { ServerMessage } from '../../../../classes/ServerMessage.class';
import { State } from './../../../../models/state.entity';
import { Device } from '../../../../models/device.entity';
import { GasHistory } from '../../../../models/gasHistory.entity';
import { WaterHistory } from '../../../../models/waterHistory.entity';
import { WaterSettings } from '../../../../models/waterSettings.entity';
import { GasSettings } from '../../../../models/gasSettings.entity';
import { Logger } from 'winston';
import { DataloggerHistory } from '../../../../models/dataloggerHistory.entity';
import { DataloggerSettings } from '../../../../models/dataloggerSettings.entity';
import { NaturalGasHistory } from '../../../../models/naturalGasHistory.entity';
import { NaturalGasSettings } from '../../../../models/naturalGasSettings.entity';
export declare class DevicesService {
    private readonly deviceRepository;
    private readonly waterHistoryRepository;
    private readonly gasHistoryRepository;
    private readonly waterSettingsRepository;
    private readonly gasSettingsRepository;
    private readonly dataloggerHistoryRepository;
    private readonly naturalGasHistoryRepository;
    private readonly naturalGasSettingsRepository;
    private readonly dataloggerSettingsRepository;
    private readonly userRepository;
    private readonly stateRepository;
    private readonly townRepository;
    private readonly logger;
    constructor(deviceRepository: typeof Device, waterHistoryRepository: typeof WaterHistory, gasHistoryRepository: typeof GasHistory, waterSettingsRepository: typeof WaterSettings, gasSettingsRepository: typeof GasSettings, dataloggerHistoryRepository: typeof DataloggerHistory, naturalGasHistoryRepository: typeof NaturalGasHistory, naturalGasSettingsRepository: typeof NaturalGasSettings, dataloggerSettingsRepository: typeof DataloggerSettings, userRepository: typeof User, stateRepository: typeof State, townRepository: typeof Town, logger: Logger);
    getOnlyDate(dateToFix: Date): string;
    getDateTimepikerFormat(dateToFix: any): string;
    addMonths(months: number, date?: Date): Date;
    convertDateToUTC(date: Date): Date;
    getAlerts(client: User): Promise<ServerMessage>;
    getDevices(clientData: User): Promise<ServerMessage>;
    addDevice(clientData: User, deviceData: Device): Promise<ServerMessage>;
    getNaturalGasDeviceData(clientData: any, idDevice: number, period: number): Promise<ServerMessage>;
    getNaturalGasDeviceSettings(client: User, idDevice: any): Promise<ServerMessage>;
    updateSettingsNaturalServiceMonthMaxConsumption(client: User, settings: any): Promise<ServerMessage>;
    getDeviceWaterData(clientData: any, idDevice: number, period: number): Promise<ServerMessage>;
    updateDeviceName(clientData: User, deviceData: Device): Promise<ServerMessage>;
    getIndividualLoggerDeviceData(query: {
        idDevice: number;
    }, idUser: number): Promise<ServerMessage>;
    getQueryHistoryFromTOLoggerDeviceData(query: {
        idDevice: number;
        fromDate: Date;
        toDate: Date;
    }, idUser: number): Promise<ServerMessage>;
    getLoggerDeviceSettingsEndpoint(client: User, idDevice: number): Promise<ServerMessage>;
    updateLoggerNotificationRepeatTime(client: User, settings: any): Promise<ServerMessage>;
    getWaterDeviceSettings(client: User, idDevice: any): Promise<ServerMessage>;
    updateSettingsServiceOutageDay(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceConsumptionUnits(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceSpendingUnits(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceStorageFrequency(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceStorageTime(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceDailyTransmission(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceDailyTime(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceCustomDailyTime(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceIpProtocol(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterAuthenticationProtocol(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceDescriptionLabel(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterConsumptionAlertType(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServicePeriodicFrequency(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceDripSetpoint(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceBurstSetpoint(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceFlowSetpoint(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceConsumptionSetpoint(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServicePeriodicTime(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceMonthMaxConsumption(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsWaterServiceUpdateFlags(client: User, settings: any): Promise<ServerMessage>;
    getDeviceClientAddressSettings(client: User, idDevice: any): Promise<ServerMessage>;
    updateDeviceClientAddressSettings(client: User, device: Device): Promise<ServerMessage>;
    getGasDeviceSettings(client: User, idDevice: number): Promise<ServerMessage>;
    getGasDeviceData(client: User, idDevice: number, period: number): Promise<ServerMessage>;
    updateSettingsTankCapacity(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsGasInterval(client: User, settings: any): Promise<ServerMessage>;
    updateGasOffset(client: User, settings: any): Promise<ServerMessage>;
    updateGasOffsetTime(client: User, settings: any): Promise<ServerMessage>;
    updateTravelMode(client: User, settings: any): Promise<ServerMessage>;
    updateSettingsGasMinFillingPercentage(client: User, settings: any): Promise<ServerMessage>;
    updateConsumptionUnitsPeriod(client: User, settings: any): Promise<ServerMessage>;
    private formatSettingsToString;
    private generateDummyData4gasHistories;
    getGasDeviceAlerts(client: User, idDevice: number, period: number): Promise<ServerMessage>;
    getWaterDeviceAlerts(clientData: any, idDevice: number, period: number): Promise<ServerMessage>;
    detachDevice(client: User, clientDevice: Device): Promise<ServerMessage>;
}
