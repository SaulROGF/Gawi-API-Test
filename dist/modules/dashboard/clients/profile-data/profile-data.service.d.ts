import { HistoryPayment } from './../../../../models/historyPayments.entity';
import { Card } from './../../../../models/card.entity';
import { ServerMessage } from '../../../../classes/ServerMessage.class';
import { BillingInformation } from './../../../../models/billingInformation.entity';
import { FacturApiService } from './../../../global/factur-api/factur-api.service';
import { State } from './../../../../models/state.entity';
import { Town } from './../../../../models/town.entity';
import { User } from './../../../../models/user.entity';
import { ConektaService } from '../../../global/conekta-service/conekta-service.service';
import { Logger } from 'winston';
import { EmailsService } from '../../../global/emails/emails.service';
export declare class ProfileDataService {
    private readonly stateRepository;
    private readonly townRepository;
    private readonly userRepository;
    private readonly cardRepository;
    private readonly historyPaymentsRepository;
    private readonly billingInfoRepository;
    private readonly facturapiService;
    private readonly emailsService;
    private readonly conektaService;
    private readonly logger;
    constructor(stateRepository: typeof State, townRepository: typeof Town, userRepository: typeof User, cardRepository: typeof Card, historyPaymentsRepository: typeof HistoryPayment, billingInfoRepository: typeof BillingInformation, facturapiService: FacturApiService, emailsService: EmailsService, conektaService: ConektaService, logger: Logger);
    retrieveTownsAndStates(idUser: number): Promise<ServerMessage>;
    updateTownInClient(client: User, body: Town): Promise<ServerMessage>;
    getBillingInfoData(client: User): Promise<ServerMessage>;
    updateBillingInfoData(client: User, billingInfoData: BillingInformation): Promise<ServerMessage>;
    deleteUserData(idUser: number): Promise<ServerMessage>;
    getClientAccountData(idUser: number): Promise<ServerMessage>;
    updateClientName(user: User, userData: User): Promise<ServerMessage>;
    updateClientPhone(user: User, userData: User): Promise<ServerMessage>;
    updateClientEmail(user: User, userData: any): Promise<ServerMessage>;
    addCard(cardInfo: {
        conektaCardToken: string;
        activePaymentMethod: boolean;
    }, client: User): Promise<ServerMessage>;
    deleteCard(cardInfo: Card, client: User): Promise<ServerMessage>;
    getAllCards(client: User): Promise<ServerMessage>;
    getCard(idCard: number, client: User): Promise<ServerMessage>;
    setCardAsDefault(cardInfo: Card, client: User): Promise<ServerMessage>;
    payDeviceSubscription(idUser: number, newPaymentData: {
        idDevice: number;
        type: number;
        requireInvoice: boolean;
    }): Promise<ServerMessage>;
    getPaymentsList(idUser: number): Promise<ServerMessage>;
    getPaymentDetails(idUser: number, idHistoryPayments: number): Promise<ServerMessage>;
    buildPaymentDto(payment: HistoryPayment): {
        idHistoryPayment: number;
        codePayment: string;
        clientId: number;
        clientName: string;
        clientEmail: string;
        clientPhone: string;
        idDevice: number;
        serialNumber: string;
        deviceType: number;
        idConektaAccount: string;
        clientState: string;
        clientTown: string;
        clientCreatedAt: Date;
        commentForUser: string;
        product: string;
        status: string;
        needInvoice: boolean;
        invoiced: boolean;
        facturapiInvoiceId: string;
        verificationUrl: string;
        amount: number;
        organizationName: string;
        updatedAt: Date;
        createdAt: Date;
    };
    addMonths(months: number, date?: Date): Date;
}
